#version 400 core

const int MaxLightsForEachEntity = 10;
uniform float tileDivision;

in vec2 pass_textureCoords;
in vec4 vPos;
in vec3 surfaceNormal;
in vec3 toLightVector[MaxLightsForEachEntity];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;

uniform vec3 lightColor[MaxLightsForEachEntity];
uniform vec3 attenuation[MaxLightsForEachEntity];
uniform int lightType[MaxLightsForEachEntity];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

float rand(vec2 n);
float noise(vec2 p);

void main(void){

	vec2 tiledCoords = pass_textureCoords * tileDivision;
	
	float heightOffset = vPos.y + noise(vPos.xz);
	
	vec4 totalColor = mix(mix(mix(texture(texture2, tiledCoords),
	 texture(texture1, tiledCoords), clamp(100 - heightOffset, 0, 1)),
	   texture(texture0, tiledCoords), clamp(10 - heightOffset, 0, 1)),
	   	 texture(texture3, tiledCoords), clamp(-140 - heightOffset, 0, 1));
	
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < MaxLightsForEachEntity; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		
		switch(lightType[i]) {
		case 0:
			
			totalDiffuse = totalDiffuse + (brightness * lightColor[i]);
			totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i]);
		break;
		case 1:
			
			totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attFactor;
			totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i]) / attFactor;
		break;
		}
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	out_Color = vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	
}

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 p){
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u*u*(3.0-2.0*u);
	
	float res = mix(
		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
	return res*res;
}