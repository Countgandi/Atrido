#version 400 core

const int MaxLightsForEachEntity = 4;
uniform float tileDivision;

in vec2 pass_textureCoords;
in vec4 vPos;
in vec3 surfaceNormal;
in vec3 toLightVector[MaxLightsForEachEntity];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;

uniform vec3 lightColor[MaxLightsForEachEntity];
uniform vec3 attenuation[MaxLightsForEachEntity];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec2 tiledCoords = pass_textureCoords * tileDivision;
	vec4 totalColor;
	if(vPos.y < 5) {
		totalColor = texture(texture0, tiledCoords);
	} else if(vPos.y >= 5 && vPos.y <= 6) {
		totalColor = mix(texture(texture1, tiledCoords), texture(texture0, tiledCoords), 6 - vPos.y);
	} else if(vPos.y > 6 && vPos.y < 65) {
		totalColor = texture(texture1, tiledCoords);
	} else if(vPos.y >= 65 && vPos.y <= 66) {
		totalColor = mix(texture(texture2, tiledCoords), texture(texture1, tiledCoords), 66 - vPos.y);
	} else if(vPos.y > 66 && vPos.y < 70) {
		totalColor = texture(texture2, tiledCoords);
	} else if(vPos.y >= 70 && vPos.y <= 71) {
		totalColor = mix(texture(texture3, tiledCoords), texture(texture2, tiledCoords), 71 - vPos.y);
	} else if(vPos.y > 71) {
		totalColor = texture(texture3, tiledCoords);
	}
	
	
	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < MaxLightsForEachEntity; i++) {
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 unitVectorToCamera = normalize(toCameraVector);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i]) / attFactor;
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	
	out_Color = vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	
}
